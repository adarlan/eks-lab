name: ðŸš€ Deploy

on:
  workflow_dispatch:

jobs:

  vpc-network:
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: vpc-network
    secrets: inherit

  eks-cluster:
    needs: [vpc-network]
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: eks-cluster
    secrets: inherit

  namespace-governance:
    needs: [eks-cluster]
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: namespace-governance
    secrets: inherit

  crds:
    needs: [eks-cluster]
    uses: ./.github/workflows/kubectl-apply.yaml
    with:
      path: crds/
      kustomize: true
    permissions:
      id-token: write
      contents: read
    secrets: inherit

  ingress-nginx:
    needs: [namespace-governance]
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: ingress-nginx
    secrets: inherit

  kube-prometheus-stack:
    needs: [namespace-governance, crds]
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: kube-prometheus-stack
    secrets: inherit

  cert-manager:
    needs: [namespace-governance, crds]
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: cert-manager
    secrets: inherit

  argo-cd:
    needs: [namespace-governance, crds]
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: argo-cd
    secrets: inherit

  argocd-applications:
    needs: [argo-cd]
    # needs: [namespace-governance, crds]
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: argocd-applications
    secrets: inherit

  ecr-repositories:
    uses: ./.github/workflows/terraform-apply.yaml
    with:
      dir: ecr-repositories
    secrets: inherit

  docker-images:
    needs: [ecr-repositories]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          role-session-name: docker-images
          aws-region: ${{ vars.AWS_REGION }}
