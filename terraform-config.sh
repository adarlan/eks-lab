#!/bin/bash

# This script generates `terraform.auto.tfvars` files by replacing placeholder values from `terraform.tfvars`.
#
# Features:
# - Prompts the user for any required configuration values.
# - Saves user-provided values in a `terraform-config.env` file for future runs.
# - Automatically generates `terraform.auto.tfvars` with the correct values.
#
# Why use `terraform.auto.tfvars`?
# - Terraform automatically loads `terraform.auto.tfvars`, so you donâ€™t need to modify `terraform.tfvars` manually.
#
# Usage:
# - If a `terraform-config.env` file already exists, the script will reuse stored values.
# - If a variable is missing in the `terraform-config.env` file, you will be prompted to provide a value.
# - Use the `--reset` flag to be prompted again and reconfigure all variables.
# - Use the `--no-prompt` flag to skip interactive prompts.
# - `--no-prompt` and `--reset` **cannot** be used together.
# - Use the --dir flag to specify a directory.
# - If the --dir flag is ommited, it will run for all Terraform directories.
# TODO --hardcode

set -e
cd $(dirname $0)

no_prompt=false
reset=false
dir_enabled=false
for arg in "$@"; do
    if [[ "$arg" == "--no-prompt" ]]; then no_prompt=true; fi
    if [[ "$arg" == "--reset" ]]; then reset=true; fi

    if [[ "$arg" == "--dir" ]]; then
        dir_enabled=true
    elif $dir_enabled; then
        dir=$(basename $arg)
        dir_enabled=false
    fi
done

if [ -f terraform-config.env ]; then
    source terraform-config.env
else
    echo "# WARNING: This file is automatically generated. Do NOT edit manually!" > terraform-config.env
    echo "# To update configuration, run: ./terraform-config.sh --reset" >> terraform-config.env
    echo "" >> terraform-config.env
fi

if $no_prompt && $reset; then
    echo; echo "[ERROR] --no-prompt and --reset cannot be used in conjunction"
    exit 1
fi

if $no_prompt; then
    echo; echo "Reading terraform-config.env"
else
    echo; echo "Configuring terraform-config.env"
fi

read_var() {

    var="$1"
    default_value_cmd="$2"

    value="${!var}"

    if $no_prompt; then

        if [ -z "$value" ]; then
            echo; echo "[ERROR] $var is not set"
            exit 1
        else
            echo "- $var: $value"
        fi

    elif $reset || [ -z "$value" ]; then

        if [ ! -z "$value" ]; then
            default_value="$value"
        elif ! default_value="$(eval $default_value_cmd)"; then
            default_value=""
        fi

        if [ -z "$default_value" ]; then
            prompt="- $var: "
        else
            prompt="- $var ($default_value): "
        fi

        read -p "$prompt" "$var"
        value="${!var}"

        if [ -z "$value" ]; then
            if [ -z "$default_value" ]; then
                echo; echo "[ERROR] $var is not set"
                exit 1
            else
                eval "$var=\"$default_value\""
                value="${!var}"
            fi
        fi

        if grep -q "^${var}=" terraform-config.env > /dev/null; then
            sed -i.bak "s|^$var=.*|$var=\"$value\"|" terraform-config.env
            rm terraform-config.env.bak
        else
            echo "$var=\"$value\"" >> terraform-config.env
        fi

    else
        echo "- $var: $value"
    fi
}

read_var PROJECT           'basename $(pwd)'
read_var AWS_PROFILE       'echo "default"'
read_var AWS_IAM_USER      'aws --profile=$AWS_PROFILE iam get-user --query "User.UserName" --output text'
read_var AWS_REGION        'aws --profile=$AWS_PROFILE configure get region || echo "us-east-1"'
read_var DOMAIN            'echo "example.com"'
read_var APPLICATION_HOST  'echo "app.$DOMAIN"'
read_var ACME_EMAIL        'gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /user/public_emails | jq -r .[0].email'
read_var ORGANIZATION      'echo ""'
read_var CLUSTER_NAME      'echo "$PROJECT"'
read_var GITHUB_REPOSITORY 'echo "$PROJECT"'
read_var ARGOCD_HOST       'echo "argocd.$DOMAIN"'
read_var GRAFANA_HOST      'echo "grafana.$DOMAIN"'
read_var PROMETHEUS_HOST   'echo "prometheus.$DOMAIN"'

generate_terraform_auto_tfvars() {

    dir=$1
    echo; echo $dir

    # Generating a terraform.cloud.env file exporting the TF_CLOUD_ORGANIZATION and TF_WORKSPACE variables,
    # because these configurations cannot be defined as dynamic variables on Terraform.
    if grep -Fxq "  cloud {}" $dir/terraform.tf; then
        echo "- Generating $dir/terraform.cloud.env"
        echo "# WARNING: This file is automatically generated. Do NOT edit manually!" > $dir/terraform.cloud.env
        echo "# To update configuration, run: ./terraform-config.sh --dir $dir --reset" >> $dir/terraform.cloud.env
        echo "" >> $dir/terraform.cloud.env
        echo "export TF_CLOUD_ORGANIZATION=\"$ORGANIZATION\"" >> $dir/terraform.cloud.env
        echo "export TF_CLOUD_PROJECT=\"$PROJECT\"" >> $dir/terraform.cloud.env
        echo "export TF_WORKSPACE=\"$PROJECT-$dir\"" >> $dir/terraform.cloud.env
    fi
    # TODO if --hardcode, replace the cloud {} empty block instead of generating a terraform.cloud.env file.
    # (and also replace placeholders in-place instead of generating .auto.tfvars file)
    # cloud {
    #   organization = "$ORGANIZATION"
    #   project      = "$PROJECT"
    #   workspaces {
    #     name = "$PROJECT-$dir"
    #   }
    # }

    echo "- Generating $dir/terraform.auto.tfvars"
    echo "# WARNING: This file is automatically generated. Do NOT edit manually!" > $dir/terraform.auto.tfvars
    echo "# To make changes, update the $dir/terraform.tfvars file and run: ./terraform-config.sh --dir $dir --reset" >> $dir/terraform.auto.tfvars
    echo "" >> $dir/terraform.auto.tfvars
    cat $dir/terraform.tfvars >> $dir/terraform.auto.tfvars
    variables=$(grep -E -o '^[A-Z0-9_]+' terraform-config.env)
    for variable in $variables; do
        value="${!variable}"

        if grep -q "<$variable>" $dir/terraform.auto.tfvars > /dev/null; then
            echo "  - Replacing placeholder: <$variable> ---> $value"
            sed -i.bak -e "s|<$variable>|$value|g" $dir/terraform.auto.tfvars
            rm $dir/terraform.auto.tfvars.bak
        fi
    done
}

if [ -z "$dir" ]; then
    for dir in */; do
        dir=$(basename $dir)
        if [ -d "$dir" ] && [ -f $dir/terraform.tfvars ]; then
            generate_terraform_auto_tfvars $dir
        fi
    done
else
    generate_terraform_auto_tfvars $dir
fi
